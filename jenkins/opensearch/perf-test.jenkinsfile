lib = library(identifier: "jenkins@20211118", retriever: legacySCM(scm))

pipeline {
    agent none
     options {
        timeout(time: 10, unit: 'HOURS')
    }
    environment {
        AGENT_X64 = 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
        AGENT_IMAGE = 'opensearchstaging/ci-runner:ci-runner-centos7-v1'
        BUNDLE_MANIFEST = "bundle-manifest.yml"
    }
    parameters {
        string(
            name: 'GITHUB_TOKEN',
            description: 'Github token for account access.',
            trim: true
        )
        string(
            name: 'BUNDLE_MANIFEST_URL',
            description: 'The bundle manifest URL, e.g. https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.2.2/98/linux/x64/builds/opensearch/manifest.yml.',
            trim: true
        )
//         string(
//             name: 'INPUT_MANIFEST',
//             description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
//             trim: true
//         )
        string(
            defaultValue: 'nyc_taxis',
            name: 'TEST_WORKLOAD',
            description: 'The agent label where the tests should be executed, e.g. Jenkins-Agent-al2-x64-c54xlarge-Docker-Host.',
            trim: true
        )
        string(
            defaultValue: '1',
            name: 'TEST_ITERATIONS',
            description: 'The agent label where the tests should be executed, e.g. Jenkins-Agent-al2-x64-c54xlarge-Docker-Host.',
            trim: true
        )
        string(
            defaultValue: '0',
            name: 'WARMUP_ITERATIONS',
            description: 'The agent label where the tests should be executed, e.g. Jenkins-Agent-al2-x64-c54xlarge-Docker-Host.',
            trim: true
        )
    }

    stages {
//         stage('detect docker image + args') {
//             agent {
//                 docker {
//                     label AGENT_X64
//                     image 'opensearchstaging/ci-runner:ci-runner-centos7-v1'
//                     alwaysPull true
//                 }
//             }
//             steps {
//                 script {
//                     dockerAgent = detectDockerAgent()
//                 }
//             }
//         }
        stage('validate-parameters') {
            steps {
                script {
                    if (BUNDLE_MANIFEST_URL == '') {
                        currentBuild.result = 'ABORTED'
                        error("Performance Tests failed to start. Missing parameter: BUNDLE_MANIFEST_URL.")
                    }
//                     if (INPUT_MANIFEST == '') {
//                         currentBuild.result = 'ABORTED'
//                         error("Performance Tests failed to start. Missing parameter: INPUT_MANIFEST.")
//                     }
                    if (GITHUB_TOKEN == '') {
                        currentBuild.result = 'ABORTED'
                        error("Performance Tests failed to start. Missing parameter: GITHUB_TOKEN.")
                    }
                }
            }
        }
        stage('perf-test') {
            agent {
                docker {
                    label AGENT_X64
                    image AGENT_IMAGE
                    alwaysPull true
                }
            }
            steps {
                script {
                    def bundleManifestObj = downloadBuildManifest(
                        url: BUNDLE_MANIFEST_URL,
                        path: BUNDLE_MANIFEST
                    )
                    String buildId = bundleManifestObj.getArtifactBuildId()
                    env.BUILD_ID = buildId
                    env.HAS_SECURITY = bundleManifestObj.components.containsKey("security")
                    echo "BUNDLE_MANIFEST: ${BUNDLE_MANIFEST}"
                    echo "BUILD_ID: ${BUILD_ID}"
                    echo "Security: ${HAS_SECURITY}"

                    runPerfTestScript(bundleManifest: "${BUNDLE_MANIFEST}",
                        buildId: "${BUILD_ID}",
                        security: false,
                        workload: TEST_WORKLOAD,
                        testIterations: TEST_ITERATIONS,
                        warmupIterations: WARMUP_ITERATIONS)

                    if(env.HAS_SECURITY) {
                     runPerfTestScript(bundleManifest: "${BUNDLE_MANIFEST}",
                        buildId: "${BUILD_ID}",
                        security: true,
                        workload: TEST_WORKLOAD,
                        testIterations: TEST_ITERATIONS,
                        warmupIterations: WARMUP_ITERATIONS)
                    }

                }
            }

            post {
                success {
                    script {
                        uploadTestResults(
                                buildManifestFileName: "${BUNDLE_MANIFEST}",
                                jobName: 'perf-test',
                                buildNumber: "${BUILD_ID}"
                        )
                    }
                }
                always {
                    postCleanup()
                }
            }
        }
    }
}
